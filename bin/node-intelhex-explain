#!/usr/bin/env node

const program = require('commander');
const path = require('path');
const intelhex = require('../index');
const fs = require('fs');
const _ = require('lodash');
const utils = require('../lib/utils');
const IntelToBufferProcessor = require('../lib/IntelHexFileIn');

program
.option('-l, --littleEndian', 'Display data as little endian' )
.arguments('intelhexFilePath')
.parse( process.argv );

if( !program.args || program.args.length < 1 ){
	console.error('two arguments required');
	process.exit(1);
}

function readFileSync( inputPath ){
	var string = null;
	try{
		string = fs.readFileSync( inputPath, { encoding: 'utf8' });
	}catch( error ){
		console.log( "Could not read input file: ", error.message );
	}
	return string;
}

const inputPath = path.resolve( program.args[0] );
const littleEndian = program.littleEndian;
const intelHexString = readFileSync( inputPath );

if( !intelHexString ){
	console.log('Terminating');
	process.exit(1);
}

var processor = new IntelToBufferProcessor();
processor.process( intelHexString );
var blocks = processor.getBlocks();

function _hexDumpWords( buffer, littleEndian ){
	return utils.hexStringByWords( buffer.toString('hex'), littleEndian );
}

_.each( blocks, function( block ){
	console.log( _.padEnd( "Block Starts at:", 20 ) + "0x" + utils.numberToHexString( block.startAddress, 8 ));
	console.log( _.padEnd( "Block Length:", 20 ) + "0x" + utils.numberToHexString( block.data.length ));

	const bytesToShow = Math.min( block.data.length, 16 );
	const showEllipses = bytesToShow < block.data.length;
	const hexString = _hexDumpWords( block.data.slice(0, bytesToShow ), littleEndian);

	console.log( _.padEnd( "Block Data Begins:", 20 ) + "0x" + hexString + ((showEllipses ) ? " ... " : "") + "\n");
});



